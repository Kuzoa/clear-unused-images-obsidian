/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class OzanClearImagesSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Clear Images Settings" });
        new obsidian.Setting(containerEl)
            .setName('Ribbon Icon')
            .setDesc('Turn on if you want Ribbon Icon for clearing the images.')
            .addToggle((toggle) => toggle
            .setValue(this.plugin.settings.ribbonIcon)
            .onChange((value) => {
            this.plugin.settings.ribbonIcon = value;
            this.plugin.saveSettings();
            this.plugin.refreshIconRibbon();
        }));
        new obsidian.Setting(containerEl)
            .setName('Deleted Image Destination')
            .setDesc('Select where you want images to be moved once they are deleted')
            .addDropdown((dropdown) => {
            dropdown.addOption('permanent', 'Delete Permanently');
            dropdown.addOption('.trash', 'Move to Obsidian Trash');
            dropdown.addOption('system-trash', 'Move to System Trash');
            dropdown.setValue(this.plugin.settings.deleteOption);
            dropdown.onChange((option) => {
                this.plugin.settings.deleteOption = option;
                this.plugin.saveSettings();
            });
        });
        new obsidian.Setting(containerEl)
            .setName('Excluded Folders')
            .setDesc(`Provide the folder names (Case Sensitive) divided by comma (,) to be excluded from clearing. 
					i.e. For images under Personal/Files/Zodiac -> Zodiac should be used for exclusion`)
            .addText((text) => text
            .setValue(this.plugin.settings.excludedFolders)
            .onChange((value) => {
            this.plugin.settings.excludedFolders = value;
            this.plugin.saveSettings();
        }));
    }
}

const DEFAULT_SETTINGS = {
    deleteOption: '.trash',
    excludedFolders: '',
    ribbonIcon: false,
};
class OzanClearImages extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.ribbonIconEl = undefined;
        this.refreshIconRibbon = () => {
            var _a;
            (_a = this.ribbonIconEl) === null || _a === void 0 ? void 0 : _a.remove();
            if (this.settings.ribbonIcon) {
                this.ribbonIconEl = this.addRibbonIcon('image-file', 'Clear Unused Images', (event) => {
                    this.clearUnusedImages();
                });
            }
        };
        this.imageRegex = /.*(jpe?g|png|gif|svg|bmp)/;
        this.imageExtensions = new Set(['jpeg', 'jpg', 'png', 'gif', 'svg', 'bmp']);
        // Compare Used Images with all images and return unused ones
        this.clearUnusedImages = () => __awaiter(this, void 0, void 0, function* () {
            var unused_images = this.getUnusedImages();
            var len = unused_images.length;
            if (len > 0) {
                console.log('[+] Clearing started.');
                this.deleteFilesInTheList(unused_images).then((nr) => {
                    new obsidian.Notice(nr + ' image(s) in total deleted.');
                    console.log('[+] Clearing completed.');
                });
            }
            else {
                new obsidian.Notice('All images are used. Nothing was deleted.');
            }
        });
        // Create the List of Unused Images
        this.getUnusedImages = () => {
            var all_images_in_vault = this.getAllImagesInVault();
            var unused_images = [];
            var used_images_set;
            // Get Used Images in All Markdown Files
            used_images_set = this.getImagePathSetForVault();
            // Compare All Images vs Used Images
            all_images_in_vault.forEach(img => {
                if (!used_images_set.has(img.path))
                    unused_images.push(img);
            });
            return unused_images;
        };
        // Clear Images From the Provided List
        this.deleteFilesInTheList = (fileList) => __awaiter(this, void 0, void 0, function* () {
            var deleteOption = this.settings.deleteOption;
            var deletedImages = 0;
            for (let file of fileList) {
                if (this.file_is_in_excluded_folder(file)) {
                    console.log('File not referenced but excluded: ' + file.path);
                }
                else {
                    if (deleteOption === '.trash') {
                        yield this.app.vault.trash(file, false);
                        console.log('Moved to Obsidian Trash: ' + file.path);
                    }
                    else if (deleteOption === 'system-trash') {
                        yield this.app.vault.trash(file, true);
                        console.log('Moved to System Trash: ' + file.path);
                    }
                    else if (deleteOption === 'permanent') {
                        yield this.app.vault.delete(file);
                        console.log('Deleted: ' + file.path);
                    }
                    deletedImages++;
                }
            }
            return deletedImages;
        });
        // Check if File is Under Excluded Folders
        this.file_is_in_excluded_folder = (file) => {
            var excludedFoldersSettings = this.settings.excludedFolders;
            if (excludedFoldersSettings === '') {
                return false;
            }
            else {
                var excludedFolders = new Set(excludedFoldersSettings.split(",").map(folderName => {
                    return folderName.trim();
                }));
                var filePathParts = file.path.split("/").map((txt) => {
                    if (txt != '..')
                        return txt;
                });
                // Check only if image in a folder
                if (filePathParts.length > 1) {
                    // Check only the final folder name
                    if (excludedFolders.has(filePathParts[filePathParts.length - 2])) {
                        return true;
                    }
                }
                return false;
            }
        };
        // Getting all available images saved in vault
        this.getAllImagesInVault = () => {
            let allFiles = this.app.vault.getFiles();
            let images = [];
            for (let i = 0; i < allFiles.length; i++) {
                if (this.imageExtensions.has(allFiles[i].extension)) {
                    images.push(allFiles[i]);
                }
            }
            return images;
        };
        // New Method for Getting All Used Images
        this.getImagePathSetForVault = () => {
            var images_set = new Set();
            var resolvedLinks = this.app.metadataCache.resolvedLinks;
            if (resolvedLinks) {
                for (const [md_file, links] of Object.entries(resolvedLinks)) {
                    for (const [file_path, nr] of Object.entries(resolvedLinks[md_file])) {
                        var image_match = file_path.match(this.imageRegex);
                        if (image_match)
                            images_set.add(image_match[0]);
                    }
                }
            }
            return images_set;
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading oz-clear-unused-images plugin");
            this.addSettingTab(new OzanClearImagesSettingsTab(this.app, this));
            yield this.loadSettings();
            this.addCommand({
                id: 'clear-images-obsidian',
                name: 'Clear Unused Images in Vault',
                callback: () => this.clearUnusedImages()
            });
            this.refreshIconRibbon();
        });
    }
    onunload() {
        console.log('Unloading oz-clear-unused-images plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = OzanClearImages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
