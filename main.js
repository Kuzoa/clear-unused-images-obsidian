/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

// Regex for [[ ]] format
const image_line_regex_1 = /!\[\[.*(jpe?g|png|gif|svg).*\]\]/g;
const file_name_regex_1 = /(?<=\[\[).*(jpe?g|png|gif|svg)/;
// Regex for ![ ]( ) format
const image_line_regex_2 = /!\[(^$|.*)\]\(.*(jpe?g|png|gif|svg)\)/g;
const file_name_regex_2 = /(?<=\().*(jpe?g|png|gif|svg)/;
// Getting Images from Lines matching Image Regexes
const getImageFilesFromMarkdown = (app, file) => __awaiter(void 0, void 0, void 0, function* () {
    var content = yield app.vault.read(file);
    var images = [];
    var matches_1 = content.match(image_line_regex_1);
    var matches_2 = content.match(image_line_regex_2);
    var image;
    var file_name_match;
    if (matches_1) {
        matches_1.forEach(match => {
            file_name_match = match.match(file_name_regex_1);
            image = app.metadataCache.getFirstLinkpathDest(decodeURIComponent(file_name_match[0]), file.path);
            if (image != null)
                images.push(image);
        });
    }
    if (matches_2) {
        matches_2.forEach(match => {
            file_name_match = match.match(file_name_regex_2);
            image = app.metadataCache.getFirstLinkpathDest(decodeURIComponent(file_name_match[0]), file.path);
            if (image != null)
                images.push(image);
        });
    }
    return yield Promise.all(images);
});
// Getting all available images saved in vault
const getAllImagesInVault = (app) => {
    let allFiles = app.vault.getFiles();
    let images = [];
    const imageRegex = /.*(jpe?g|png|gif|svg)/;
    for (let i = 0; i < allFiles.length; i++) {
        if (allFiles[i].path.match(imageRegex)) {
            images.push(allFiles[i]);
        }
    }
    return images;
};
// Check if image in the list
const imageInTheFileList = (image, list) => {
    for (let i = 0; i < list.length; i++) {
        if (list[i] === image) {
            return true;
        }
    }
    return false;
};
// Clear Images From the Provided List
const deleteFilesInTheList = (app, fileList) => {
    fileList.forEach(file => {
        app.vault.delete(file);
    });
};
// Compare Used Images with all images and return unused ones
const clearUnusedImages = (app) => {
    var all_images_in_vault = getAllImagesInVault(app);
    var unused_images = [];
    var markdown_files_in_vault = app.vault.getMarkdownFiles();
    var used_images = [];
    // Get Path of Used Imags in the Vault
    markdown_files_in_vault.forEach((file) => __awaiter(void 0, void 0, void 0, function* () {
        var new_images = yield getImageFilesFromMarkdown(app, file);
        new_images.forEach(img => {
            used_images.push(img);
        });
    }));
    setTimeout(() => {
        all_images_in_vault.forEach(img => {
            if (!imageInTheFileList(img, used_images)) {
                unused_images.push(img);
            }
        });
        var len = unused_images.length;
        if (len > 0) {
            console.log('Deleting ' + len + ' images.');
            deleteFilesInTheList(app, unused_images);
            new obsidian.Notice(len + ' image(s) deleted.');
        }
        else {
            new obsidian.Notice('All images are used. Nothing was deleted.');
        }
    }, 2000);
};

class OzanClearImages extends obsidian.Plugin {
    onload() {
        console.log("Loading oz-clear-unused-images plugin");
        this.addCommand({
            id: 'clear-images-obsidian',
            name: 'Clear Unused Images in Vault',
            callback: () => clearUnusedImages(this.app)
        });
    }
    onunload() {
        console.log('Unloading oz-clear-unused-images plugin');
    }
}

module.exports = OzanClearImages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
